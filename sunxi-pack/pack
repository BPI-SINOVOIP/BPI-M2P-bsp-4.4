#!/bin/bash
#
# pack/pack
# (c) Copyright 2013
# Allwinner Technology Co., Ltd. <www.allwinnertech.com>
# James Deng <csjamesdeng@allwinnertech.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

############################ Notice #####################################
# a. Some config files priority is as follows:
#    - xxx_${platform}.{cfg|fex} > xxx.{cfg|fex}
#    - ${chip}/${board}/*.{cfg|fex} > ${chip}/default/*.{cfg|fex}
#    - ${chip}/default/*.cfg > common/imagecfg/*.cfg
#    - ${chip}/default/*.fex > common/partition/*.fex
#  e.g. sun8iw7p1/configs/perf/image_linux.cfg > sun8iw7p1/configs/default/image_linux.cfg
#       > common/imagecfg/image_linux.cfg > sun8iw7p1/configs/perf/image.cfg
#       > sun8iw7p1/configs/default/image.cfg > common/imagecfg/image.cfg
#
# b. Support Nor storages rule:
#    - Need to create sys_partition_nor.fex or sys_partition_nor_${platform}.fex
#    - Add "{filename = "full_img.fex",     maintype = "12345678", \
#      subtype = "FULLIMG_00000000",}" to image[_${platform}].cfg
#
# c. Switch uart port
#    - Need to add your chip configs into pctools/linux/card_debug_pin
#    - Call pack with 'debug' parameters


if [ $(basename `pwd`) != "pack" ] ; then
	echo "Please run at the top directory of pack"
	exit 1
fi

function pack_error()
{
	echo -e "\033[47;31mERROR: $*\033[0m"
}

function pack_warn()
{
	echo -e "\033[47;34mWARN: $*\033[0m"
}

function pack_info()
{
	echo -e "\033[47;30mINFO: $*\033[0m"
}

. ../build/shflags

# define option, format:
#   'long option' 'default value' 'help message' 'short option'
DEFINE_string 'chip' '' 'chip to build, e.g. sun7i' 'c'
DEFINE_string 'platform' '' 'platform to build, e.g. linux, android, camdroid' 'p'
DEFINE_string 'board' '' 'board to build, e.g. evb' 'b'
DEFINE_string 'kernel' '' 'kernel to build, e.g. linux-3.4, linux-3.10' 'k'
DEFINE_string 'debug_mode' 'uart0' 'config debug mode, e.g. uart0, card0' 'd'
DEFINE_string 'signture' 'none' 'pack boot signture to do secure boot' 's'
DEFINE_string 'mode' 'normal' 'pack dump firmware' 'm'
DEFINE_string 'function' 'android' 'pack private firmware' 'f'
DEFINE_string 'type' '' 'distinguish android and aliyun img' 't'
DEFINE_string 'no_img' '' 'get_uboot without pack img' 'n'
DEFINE_string 'programmer' '' 'creat programmer img or not' 'w'

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

PACK_CHIP=${FLAGS_chip}
PACK_PLATFORM=${FLAGS_platform}
PACK_BOARD=${FLAGS_board}
PACK_KERN=${FLAGS_kernel}
PACK_DEBUG=${FLAGS_debug_mode}
PACK_SIG=${FLAGS_signture}
PACK_MODE=${FLAGS_mode}
PACK_FUNC=${FLAGS_function}
PACK_TYPE=${FLAGS_type}
PACK_NO_IMG=${FLAGS_no_img}
PACK_PROGRAMMER=${FLAGS_programmer}

ROOT_DIR=`pwd`
TOOLS_DIR="${ROOT_DIR}/pctools/linux"
if [ "xcamdroid" = "x${PACK_PLATFORM}" ]; then
	LICHEE_OUT="../../out/${PACK_CHIP}/linux/common"
	PACK_FUNC="spinor"
else
	LICHEE_OUT="../../out/${PACK_CHIP}/${PACK_PLATFORM}/common"
fi

OTA_TEST_NAME="ota_test"
if [ -d ${LICHEE_OUT} ] ; then
    LICHEE_OUT=`cd ${LICHEE_OUT}; pwd`
else
    pack_error "build lichee before you pack"
    exit 1
fi

if [ -n "`echo ${PACK_CHIP} | grep "sun5[0-9]i"`" ]; then
	export ARCH=arm64
else
	export ARCH=arm
fi

export PATH=${TOOLS_DIR}/mod_update:${TOOLS_DIR}/openssl:${TOOLS_DIR}/eDragonEx:${TOOLS_DIR}/fsbuild200:${TOOLS_DIR}/android:$PATH

tools_file_list=(
common/tools/split_xxxx.fex
chips/${PACK_CHIP}/tools/split_xxxx.fex
common/tools/usbtool_test.fex
chips/${PACK_CHIP}/tools/usbtool_test.fex
common/tools/cardscript.fex
common/tools/cardscript_secure.fex
chips/${PACK_CHIP}/tools/cardscript.fex
chips/${PACK_CHIP}/tools/cardscript_secure.fex
common/tools/cardtool.fex
chips/${PACK_CHIP}/tools/cardtool.fex
common/tools/usbtool.fex
chips/${PACK_CHIP}/tools/usbtool.fex
common/tools/aultls32.fex
chips/${PACK_CHIP}/tools/aultls32.fex
common/tools/aultools.fex
chips/${PACK_CHIP}/tools/aultools.fex
)

configs_file_list=(
common/toc/toc1.fex
common/toc/toc0.fex
common/toc/boot_package.fex
common/dtb/sunxi.fex
common/hdcp/esm.fex
common/imagecfg/*.cfg
common/partition/sys_partition_dump.fex
common/partition/sys_partition_private.fex
common/partition/sys_partition_dragonboard.fex
common/partition/sys_partition_linux.fex
chips/${PACK_CHIP}/configs/default/*
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.fex
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.cfg
)

boot_resource_list=(
chips/${PACK_CHIP}/boot-resource/boot-resource:out/
chips/${PACK_CHIP}/boot-resource/boot-resource.ini:out/
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.bmp:out/boot-resource/
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.bmp:out/bootlogo.bmp
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.jpg:out/boot-resource/
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.jpg:out/bootlogo.jpg
)

boot_file_list=(
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}.bin:out/boot0_nand.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}.bin:out/boot0_sdcard.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}.bin:out/boot0_spinor.fex
chips/${PACK_CHIP}/bin/fes1_${PACK_CHIP}.bin:out/fes1.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}.bin:out/u-boot.fex
chips/${PACK_CHIP}/bin/bl31.bin:out/monitor.fex
chips/${PACK_CHIP}/bin/scp.bin:out/scp.fex
chips/${PACK_CHIP}/bin/cpus_pm_binary.code:out/cpus_pm_binary.code
chips/${PACK_CHIP}/bin/scp.bin:out/scp.fex
chips/${PACK_CHIP}/bin/optee_${PACK_CHIP}.bin:out/optee.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}.bin:out/u-boot-spinor.fex
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_nand-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_sdcard-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/boot0_spinor-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/u-boot-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/u-boot-spinor-${OTA_TEST_NAME}.fex
)

mul_config_file_list=(
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.fex
)

boot_file_secure=(
chips/${PACK_CHIP}/bin/semelis_${PACK_CHIP}.bin:out/semelis.bin
chips/${PACK_CHIP}/bin/optee_${PACK_CHIP}.bin:out/optee.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}.bin:out/sboot.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/sboot-${OTA_TEST_NAME}.bin
)

a64_boot_file_secure=(
# chips/${PACK_CHIP}/bin/optee_${PACK_CHIP}.bin:out/optee.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}.bin:out/sboot.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}-${OTA_TEST_NAME}.bin:out/sboot-${OTA_TEST_NAME}.bin
)

#
# This function can get the realpath between $SRC and $DST
#
function get_realpath()
{
	local src=$(cd $1; pwd);
	local dst=$(cd $2; pwd);
	local res="./";
	local tmp="$dst"

	while [ "${src##*$tmp}" == "${src}" ]; do
		tmp=${tmp%/*};
		res=$res"../"
	done
	res="$res${src#*$tmp/}"

	printf "%s" $res
}

function show_boards()
{
	printf "\nAll avaiable chips, platforms and boards:\n\n"
	printf "Chip            Board\n"
	for chipdir in $(find chips/ -mindepth 1 -maxdepth 1 -type d) ; do
		chip=`basename ${chipdir}`
		printf "${chip}\n"
		for boarddir in $(find chips/${chip}/configs/${platform} \
			-mindepth 1 -maxdepth 1 -type d) ; do
			board=`basename ${boarddir}`
			printf "                ${board}\n"
		done
	done
	printf "\nFor Usage:\n"
	printf "     $(basename $0) -h\n\n"
}

function uart_switch()
{
	rm -rf out/awk_debug_card0
	touch out/awk_debug_card0
	TX=`awk  '$0~"'$PACK_CHIP'"{print $2}' pctools/linux/card_debug_pin`
	RX=`awk  '$0~"'$PACK_CHIP'"{print $3}' pctools/linux/card_debug_pin`
	PORT=`awk  '$0~"'$PACK_CHIP'"{print $4}' pctools/linux/card_debug_pin`
	MS=`awk  '$0~"'$PACK_CHIP'"{print $5}' pctools/linux/card_debug_pin`
	CK=`awk  '$0~"'$PACK_CHIP'"{print $6}' pctools/linux/card_debug_pin`
	DO=`awk  '$0~"'$PACK_CHIP'"{print $7}' pctools/linux/card_debug_pin`
	DI=`awk  '$0~"'$PACK_CHIP'"{print $8}' pctools/linux/card_debug_pin`

	BOOT_UART_ST=`awk  '$0~"'$PACK_CHIP'"{print $2}' pctools/linux/card_debug_string`
	BOOT_PORT_ST=`awk  '$0~"'$PACK_CHIP'"{print $3}' pctools/linux/card_debug_string`
	BOOT_TX_ST=`awk  '$0~"'$PACK_CHIP'"{print $4}' pctools/linux/card_debug_string`
	BOOT_RX_ST=`awk  '$0~"'$PACK_CHIP'"{print $5}' pctools/linux/card_debug_string`
	UART0_ST=`awk  '$0~"'$PACK_CHIP'"{print $6}' pctools/linux/card_debug_string`
	UART0_USED_ST=`awk  '$0~"'$PACK_CHIP'"{print $7}' pctools/linux/card_debug_string`
	UART0_PORT_ST=`awk  '$0~"'$PACK_CHIP'"{print $8}' pctools/linux/card_debug_string`
	UART0_TX_ST=`awk  '$0~"'$PACK_CHIP'"{print $9}' pctools/linux/card_debug_string`
	UART0_RX_ST=`awk  '$0~"'$PACK_CHIP'"{print $10}' pctools/linux/card_debug_string`
	UART1_ST=`awk  '$0~"'$PACK_CHIP'"{print $11}' pctools/linux/card_debug_string`
	JTAG_ST=`awk  '$0~"'$PACK_CHIP'"{print $12}' pctools/linux/card_debug_string`
	MS_ST=`awk  '$0~"'$PACK_CHIP'"{print $13}' pctools/linux/card_debug_string`
	CK_ST=`awk  '$0~"'$PACK_CHIP'"{print $14}' pctools/linux/card_debug_string`
	DO_ST=`awk  '$0~"'$PACK_CHIP'"{print $15}' pctools/linux/card_debug_string`
	DI_ST=`awk  '$0~"'$PACK_CHIP'"{print $16}' pctools/linux/card_debug_string`
	MMC0_ST=`awk  '$0~"'$PACK_CHIP'"{print $17}' pctools/linux/card_debug_string`
	MMC0_USED_ST=`awk  '$0~"'$PACK_CHIP'"{print $18}' pctools/linux/card_debug_string`

	echo '$0!~";" && $0~"'$BOOT_TX_ST'"{if(C)$0="'$BOOT_TX_ST' = '$TX'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$BOOT_RX_ST'"{if(C)$0="'$BOOT_RX_ST' = '$RX'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$BOOT_PORT_ST'"{if(C)$0="'$BOOT_PORT_ST' = '$PORT'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$MMC0_USED_ST'"{if(A)$0="'$MMC0_USED_ST' = 0";A=0} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"\\['$MMC0_ST'\\]"{A=1}  \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$UART0_TX_ST'"{if(B)$0="'$UART0_TX_ST' = '$TX'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$UART0_RX_ST'"{if(B)$0="'$UART0_RX_ST' = '$RX'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"\\['$UART0_ST'\\]"{B=1} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$UART0_USED_ST'"{if(B)$0="'$UART0_USED_ST' = 1"}  \' >> out/awk_debug_card0
	echo '/^'$UART0_PORT_ST'/{next} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"\\['$UART1_ST'\\]"{B=0} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"\\['$BOOT_UART_ST'\\]"{C=1} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"\\['$JTAG_ST'\\]"{C=0} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$MS_ST'"{$0="'$MS_ST' = '$MS'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$CK_ST'"{$0="'$CK_ST' = '$CK'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$DO_ST'"{$0="'$DO_ST' = '$DO'"} \' >> out/awk_debug_card0
	echo '$0!~";" && $0~"'$DI_ST'"{$0="'$DI_ST' = '$DI'"} \' >> out/awk_debug_card0
	echo '1' >> out/awk_debug_card0

	awk -f out/awk_debug_card0 out/sys_config.fex > out/sys_config_debug.fex
	rm -f out/sys_config.fex
	mv -vf out/sys_config_debug.fex out/sys_config.fex

	#
	# Exclude sys_config.fex to find
	#
	find out/* -type f -a \( -name "*.fex" -a ! -name "sys_config.fex" \) -exec grep \
		-qEw '\[platform\]|\[product\]' {} \; -print0 | \
			xargs -0 -I{} sh -c 'awk -f out/awk_debug_card0 {} > {}_dbg \
			&& mv -vf {}_dbg {}'

	echo "uart -> card0"
}

function copy_ota_test_file()
{
	printf "ota test bootloader by diff bootlogo\n"
	rm out/boot-resource/bootlogo.bmp
	mv out/boot-resource/bootlogo_ota_test.bmp out/boot-resource/bootlogo.bmp

	printf "copying ota test boot file\n"
	if [ -f sys_partition_nor.fex -o \
		-f sys_partition_nor_${PACK_PLATFORM}.fex ];  then
		mv -vf out/boot0_spinor-${OTA_TEST_NAME}.fex	out/boot0_spinor.fex
		mv -vf out/u-boot-spinor-${OTA_TEST_NAME}.fex	out/u-boot-spinor.fex
	else
		mv -vf out/boot0_nand-${OTA_TEST_NAME}.fex	out/boot0_nand.fex
		mv -vf out/boot0_sdcard-${OTA_TEST_NAME}.fex	out/boot0_sdcard.fex
		mv -vf out/u-boot-${OTA_TEST_NAME}.fex		out/u-boot.fex
	fi

	if [ "x${PACK_SIG}" = "xsecure" -o  "x${PACK_SIG}" = "prev_refurbish" ] ; then
		printf "copying ota test secure boot file\n"
		rm -rf out/sboot.bin
		mv -vf out/sboot-${OTA_TEST_NAME}.bin out/sboot.bin
	fi

	printf "OTA test env by bootdelay(10) and logolevel(8)\n"
	sed -i 's/\(logolevel=\).*/\18/' out/env.cfg
	sed -i 's/\(bootdelay=\).*/\110/' out/env.cfg
}

function do_prepare()
{
	if [ -z "${PACK_CHIP}" -o -z "${PACK_PLATFORM}" -o -z "${PACK_BOARD}" ] ; then
		pack_error "Invalid parameters Chip: ${PACK_CHIP}, \
			Platform: ${PACK_PLATFORM}, Board: ${PACK_BOARD}"
		show_boards
		exit 1
	fi

	if [ ! -d chips/${PACK_CHIP}/configs/${PACK_BOARD} ] ; then
		pack_error "Board's directory \
			\"chips/${PACK_CHIP}/configs/${PACK_BOARD}\" is not exist."
		show_boards
		exit 1
	fi

	if [ -z "${PACK_KERN}" ] ; then
		printf "No kernel param, parse it from .buildconfig\n"
		PACK_KERN=`awk -F LICHEE_KERN_VER= '{printf $2}' ../../.buildconfig`
		if [ -z "${PACK_KERN}" ] ; then
			pack_error "Failed to parse kernel param from .buildconfig"
			exit 1
		fi
	fi

	# Cleanup
	rm -rf out/
	mkdir -p out/

	printf "copying tools file\n"
	for file in ${tools_file_list[@]} ; do
		cp -f $file out/ 2> /dev/null
	done

	if [ "x${PACK_KERN}" = "xlinux-3.4" ]; then
		cp -f common/tools/cardscript.fex out/ 2> /dev/null
	fi

	printf "copying configs file\n"
	for file in ${configs_file_list[@]} ; do
		cp -f $file out/ 2> /dev/null
	done

	# If platform config files exist, we will cover the default files
	# For example, mv out/image_linux.cfg out/image.cfg
	find ./out/* -type f -a \( -name "*.fex" -o -name "*.cfg" \) -print | \
		sed "s#\(.*\)_${PACK_PLATFORM}\(\..*\)#mv -fv & \1\2#e"


	printf "copying boot resource\n"
	for file in ${boot_resource_list[@]} ; do
		cp -rf `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	if [ ! -f out/bootlogo.bmp ]; then
		cp out/boot-resource/bootlogo.bmp out/bootlogo.bmp
		(cd out; ln -sf bootlogo.bmp bootlogo.fex)
	fi

	if [ ! -f out/bootlogo.jpg ]; then
		cp out/boot-resource/bootlogo.jpg out/bootlogo.jpg
		(cd out; ln -sf bootlogo.jpg bootlogo.fex)
	fi

	lzma -k out/bootlogo.bmp
	lzma -k out/bootlogo.jpg
	lzma -k out/bempty.bmp
	lzma -k out/battery_charge.bmp

	printf "copying boot file\n"
	for file in ${boot_file_list[@]} ; do
		cp -f `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	if [ "x${ARCH}" != "xarm64" ] ; then
		if [ "x${PACK_SIG}" = "xsecure" -o  "x${PACK_SIG}" = "xprev_refurbish" ] ; then
			printf "copying secure boot file\n"
			for file in ${boot_file_secure[@]} ; do
				cp -f `echo $file | awk -F: '{print $1}'` \
					`echo $file | awk -F: '{print $2}'` 2>/dev/null
			done
		fi
	else
		if [ "x${PACK_SIG}" = "xsecure" -o  "x${PACK_SIG}" = "xprev_refurbish" ] ; then
			printf "copying arm64 secure boot file\n"
			for file in ${a64_boot_file_secure[@]} ; do
				cp -f `echo $file | awk -F: '{print $1}'` \
					`echo $file | awk -F: '{print $2}'` 2>/dev/null
			done
		fi
	fi

	if [ "x${PACK_MODE}" = "xota_test" ] ; then
		printf "copy ota test file\n"
		copy_ota_test_file
	fi

	if [ "x${PACK_MODE}" = "xdump" ] ; then
		cp -f out/sys_partition_dump.fex out/sys_partition.fex
		cp -f out/usbtool_test.fex out/usbtool.fex
	elif [ "x${PACK_FUNC}" = "xprvt" ] ; then
		cp -f out/sys_partition_private.fex out/sys_partition.fex
	fi

	if [ "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
		if [ -n "`grep "dragonboard_test" "out/sys_config.fex" | grep "1" | grep -v ";"`" ]; then
			sed -i '/\[nand0_para\]/a\nand0_dragonboard = 1' out/sys_config.fex
	    fi
	fi

	if [ "x${PACK_FUNC}" = "xprev_refurbish" ] ; then
		printf "add burn_secure_mode in target in sys config\n"
		sed -i -e '/^\[target\]/a\burn_secure_mode=1' out/sys_config.fex
		sed -i -e '/^\[platform\]/a\secure_without_OS=1' out/sys_config.fex
	#	target_line=`grep -n "\[target\]" out/sys_config.fex`
	#	line=${target_line%:*}
	#	linea=${line}a
	#	sed -i "${linea} burn_secure_mode=1" out/sys_config.fex
	elif [ "x${PACK_SIG}" = "xsecure" ] ; then
		printf "add burn_secure_mode in target in sys config\n"
		sed -i -e '/^\[target\]/a\burn_secure_mode=1' out/sys_config.fex
		sed -i -e '/^\[platform\]/a\secure_without_OS=0' out/sys_config.fex
	else
		sed -i '/^burn_secure_mod/d' out/sys_config.fex
		sed -i '/^secure_without_OS/d' out/sys_config.fex
	fi

	if [ "x${PACK_PROGRAMMER}" = "xprogrammer" ]; then
		printf "add programmer img info target in sys config\n"
		sed -i -e '/^\[target\]/a\programmer=1' out/sys_config.fex
	fi

	# Here, we can switch uart to card or normal
	if [ "x${PACK_DEBUG}" = "xcard0" -a "x${PACK_MODE}" != "xdump" \
		-a "x${PACK_FUNC}" != "xprvt" ] ; then \
		uart_switch
	fi

	sed -i 's/\\boot-resource/\/boot-resource/g' out/boot-resource.ini
	sed -i 's/\\\\/\//g' out/image.cfg
	sed -i 's/^imagename/;imagename/g' out/image.cfg

	if [ "x${PACK_TYPE}" = "xaliyun" ]; then
		IMG_NAME="${PACK_CHIP}_${PACK_TYPE}_${PACK_BOARD}_${PACK_DEBUG}"
	else
		IMG_NAME="${PACK_CHIP}_${PACK_PLATFORM}_${PACK_BOARD}_${PACK_DEBUG}"
	fi

	if [ "x${PACK_SIG}" != "xnone" ]; then
		IMG_NAME="${IMG_NAME}_${PACK_SIG}"
	fi

	if [ "x${PACK_MODE}" = "xdump" -o "x${PACK_MODE}" = "xota_test" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_MODE}"
	fi

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_FUNC}"
	fi

	if [ "x${PACK_FUNC}" = "xprev_refurbish" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_FUNC}"
	fi

	if [ "x${PACK_SIG}" != "xnone" ]; then
		MAIN_VERION=`awk  '$0~"MAIN_VERSION"{printf"%d", $3}' common/version/version_base.mk`
		SUB_VERION=`awk  '$0~"SUB_VERSION"{printf"%d", $3}' common/version/version_base.mk`

		IMG_NAME="${IMG_NAME}_v${MAIN_VERION}-${SUB_VERION}.img"
	else
		IMG_NAME="${IMG_NAME}.img"
	fi

	IMG_PROGRAMMER_NAME="${IMG_NAME}_programmer.img"
	IMG_SRC_NAME="${IMG_NAME}.img"


	echo "imagename = $IMG_NAME" >> out/image.cfg
	echo "" >> out/image.cfg

}

function do_ini_to_dts()
{
	#these args used to conver sys_config to dts
	if [ "x${PACK_KERN}" == "xlinux-3.0"  -o \
		"x${PACK_KERN}" == "xlinux-3.3"  -o \
		"x${PACK_KERN}" == "xlinux-3.4" ] ; then
		return
	fi

	if [ -z ${LICHEE_KERN_DIR}  ]; then
		LICHEE_KERN_DIR=${LICHEE_OUT}/../../../../${PACK_KERN}
	fi
	if [ -z ${LICHEE_TOOLS_DIR}  ]; then
		LICHEE_TOOLS_DIR=${LICHEE_OUT}/../../../../tools
	fi

	local DTC_COMPILER=${LICHEE_KERN_DIR}/scripts/dtc/dtc
	local DTC_DEP_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-${PACK_BOARD}.dtb.d.dtc.tmp
	local DTC_SRC_PATH=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/
	local DTC_SRC_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-${PACK_BOARD}.dtb.dts.tmp
	local DTC_INI_FILE_BASE=${LICHEE_TOOLS_DIR}/pack/out/sys_config.fex
	local DTC_INI_FILE=${LICHEE_TOOLS_DIR}/pack/out/sys_config_fix.fex

	if [ "x${PACK_BOARD:0:10}" = "xmagton-ipc" ]; then
		DTC_DEP_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-${PACK_BOARD:0:10}.dtb.d.dtc.tmp
		DTC_SRC_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-${PACK_BOARD:0:10}.dtb.dts.tmp
	fi

	cp $DTC_INI_FILE_BASE $DTC_INI_FILE
	sed -i "s/\(\[dram\)_para\(\]\)/\1\2/g" $DTC_INI_FILE
	sed -i "s/\(\[nand[0-9]\)_para\(\]\)/\1\2/g" $DTC_INI_FILE

	if [ ! -f $DTC_COMPILER ]; then
		pack_error "Script_to_dts: Can not find dtc compiler.\n"
		exit 1
	fi

	if [ ! -f $DTC_DEP_FILE ]; then
		printf "Script_to_dts: Can not find [%s-%s.dts]. Will use common dts file instead.\n" ${PACK_CHIP} ${PACK_BOARD}
		DTC_DEP_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-soc.dtb.d.dtc.tmp
		DTC_SRC_FILE=${LICHEE_KERN_DIR}/arch/$ARCH/boot/dts/.${PACK_CHIP}-soc.dtb.dts.tmp
	fi

	$DTC_COMPILER -O dtb -o ${LICHEE_OUT}/sunxi.dtb	\
		-b 0			\
		-i $DTC_SRC_PATH	\
		-F $DTC_INI_FILE	\
		-d $DTC_DEP_FILE $DTC_SRC_FILE >/dev/null

	if [ $? -ne 0 ]; then
		pack_error "Conver script to dts failed"
		exit 1
	fi

	if [ "x${PACK_PLATFORM}" = "xdragonboard" ]; then #restore the orignal dtsi
		local DTS_PATH=${LICHEE_KERN_DIR}/arch/${ARCH}/boot/dts/
		if [ -f ${DTS_PATH}/${PACK_CHIP}_bak.dtsi ];then
			rm -f ${DTS_PATH}/${PACK_CHIP}.dtsi
			mv  ${DTS_PATH}/${PACK_CHIP}_bak.dtsi  ${DTS_PATH}/${PACK_CHIP}.dtsi
		fi
	fi

	printf "Conver script to dts ok.\n"
	return
}

function do_common()
{
	cd out/

	if [ ! -f board_config.fex ]; then
		echo "[empty]" > board_config.fex
	fi

	busybox unix2dos sys_config.fex

	busybox unix2dos board_config.fex
	script  sys_config.fex > /dev/null
	cp -f   sys_config.bin config.fex
	script  board_config.fex > /dev/null
	cp -f board_config.bin board.fex

	busybox unix2dos sys_partition.fex
	script  sys_partition.fex > /dev/null

	if [ "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
		busybox dos2unix test_config.fex
		cp test_config.fex boot-resource/
		busybox unix2dos test_config.fex
		script test_config.fex > /dev/null
		cp test_config.bin boot-resource/

		#use env_dragon.cfg
		rm -f env.cfg
		mv env_dragon.cfg env.cfg
	fi

	# Those files for SpiNor. We will try to find sys_partition_nor.fex
	if [ -f sys_partition_nor.fex ];  then

		if [ -f "${LICHEE_OUT}/sunxi.dtb" ]; then
			cp ${LICHEE_OUT}/sunxi.dtb sunxi.fex
		fi

		if [ -f "scp.fex" ]; then
			echo "update scp"
			update_scp scp.fex sunxi.fex >/dev/null
		fi

		# Here, will create sys_partition_nor.bin
		busybox unix2dos sys_partition_nor.fex
		script  sys_partition_nor.fex > /dev/null
		update_boot0 boot0_spinor.fex   sys_config.bin SDMMC_CARD > /dev/null
		if [ "x${PACK_KERN}" = "xlinux-3.4" ] ; then
			update_uboot -merge u-boot-spinor.fex  sys_config.bin > /dev/null
		else
			update_uboot -no_merge u-boot-spinor.fex  sys_config.bin > /dev/null
		fi

		if [ -f boot_package_nor.cfg ]; then
			echo "pack boot package"
			busybox unix2dos boot_package.cfg
			dragonsecboot -pack boot_package_nor.cfg
			cp boot_package.fex boot_package_nor.fex
		fi
		# Ugly, but I don't have a better way to change it.
		# We just set env's downloadfile name to env_nor.cfg in sys_partition_nor.fex
		# And if env_nor.cfg is not exist, we should copy one.
		if [ ! -f env_nor.cfg ]; then
			cp -f env.cfg env_nor.cfg >/dev/null 2<&1
		fi

		# Fixup boot mode for SPINor, just can bootm
		sed -i '/^boot_normal/s#\<boota\>#bootm#g' env_nor.cfg

		u_boot_env_gen env_nor.cfg env_nor.fex >/dev/null
	fi

	if [ -f "${LICHEE_OUT}/sunxi.dtb" ]; then
		cp ${LICHEE_OUT}/sunxi.dtb sunxi.fex
		update_dtb sunxi.fex 4096
	fi

	if [ -f "scp.fex" ]; then
		echo "update scp"
		update_scp scp.fex sunxi.fex >/dev/null
	fi

	# Those files for Nand or Card
	update_boot0 boot0_nand.fex		sys_config.bin NAND > /dev/null
	update_boot0 boot0_sdcard.fex	sys_config.bin SDMMC_CARD > /dev/null
	if [ "x${PACK_KERN}" = "xlinux-3.4" ] ; then
		update_uboot -merge u-boot.fex sys_config.bin > /dev/null
	else
		update_uboot -no_merge u-boot.fex sys_config.bin > /dev/null
	fi
	update_fes1  fes1.fex           sys_config.bin > /dev/null
	fsbuild	     boot-resource.ini  split_xxxx.fex > /dev/null
	cp -f boot-resource.fex	bootloader.fex

	# for Nand/emmc board
	if [ -f boot_package.cfg ]; then
		echo "pack boot package"
		busybox unix2dos boot_package.cfg
		dragonsecboot -pack boot_package.cfg
		if [ $? -ne 0 ]; then
			pack_error "dragonsecboot  boot_package.cfg failed"
			exit 1
		fi
	fi

	#Here, will check if need to used multi config.fex or not
	#update_uboot_v2 u-boot.fex	sys_config.bin ./ > /dev/null
	local ret=`echo $?`
	if [ $ret != "0" -a $ret != "1" ] ; then
		pack_error "update_uboot_v2 failed"
		exit 1
	elif [ $ret = "1" ] ; then
		echo "no used multi config"
	else
		echo "used multi config"
	fi

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		u_boot_env_gen env_burn.cfg env.fex > /dev/null
	else
		if [ "x${PACK_FUNC}" = "xspinor" ]; then
			sunxi_env_gen env.cfg env.fex > /dev/null
		else
			u_boot_env_gen env.cfg env.fex > /dev/null
		fi
	fi

	if [ -f "$LICHEE_OUT/arisc" ]; then
		ln -sf $(get_realpath $LICHEE_OUT ./)/arisc arisc.fex
	fi
}

function img_to_programmer()
{
	local out_img=$1
	local in_img=$2

	if [ "x${PACK_SIG}" = "xprev_refurbish" -o "x${PACK_SIG}" = "xsecure" ]; then
		programmer_img toc0.fex toc1.fex ${out_img} > /dev/null
	else
		programmer_img boot0_sdcard.fex boot_package.fex ${out_img} > /dev/null
	fi
	#create_img toc0.fex toc1.fex
	programmer_img sys_partition.bin sunxi_mbr.fex ${out_img} ${in_img} > /dev/null
}

function do_finish()
{
	# Yeah, it should contain all files into full_img.fex for spinor
	# Because, as usually, spinor image size is very small.
	# If fail to create full_img.fex, we should fake it empty.

	# WTF, it is so ugly!!! It must be sunxi_mbr.fex & sys_partition.bin,
	# not sunxi_mbr_xxx.fex & sys_partition_xxx.bin. In order to advoid this
	# loathsome thing, we need to backup & copy files. Check whether
	# sys_partition_nor.bin is exist, and create sunxi_mbr.fex for Nor.
	if [ -f sys_partition_nor.bin ]; then

		update_mbr sys_partition_nor.bin 1 sunxi_mbr_nor.fex
		if [ $? -ne 0 ]; then
			pack_error "update_mbr failed"
			exit 1
		fi
		#when use devicetree, the size of uboot+dtb is larger then 256K
		if [ "x${PACK_KERN}" = "xlinux-3.4" ] ; then

			#BOOT1_FILE=u-boot-spinor.fex
			#LOGIC_START=240 #240+16=256K
			merge_package full_img.fex boot0_spinor.fex \
			        u-boot-spinor.fex sunxi_mbr_nor.fex sys_partition_nor.bin
		fi

		if [ -f sys_partition_nor.fex ]; then
			mv sys_partition_nor.fex sys_partition.fex
		fi

	fi

	if [ ! -f sys_partition_nor.bin ]; then
		sed -i 's/.*\<boot_package_nor\.fex.*/;&/g' image.cfg
		if [ -z "`grep '^\s*{.*\<boot_package\.fex' image.cfg`" ]; then
			local newitem=$(cat << EOF
{filename = "boot_package.fex", \
maintype = "12345678", \
subtype = "BOOTPKG-00000000",}, 
EOF
)
			sed -i "/^\s*\[FILELIST\]\s*;*/a $newitem" image.cfg
		fi

		sed -i 's/.*\<sunxi_mbr_nor\.fex.*/;&/g' image.cfg
		if [ -z "`grep '^\s*{.*\<sunxi_mbr\.fex' image.cfg`" ]; then
			local newitem=$(cat << EOF
{filename = "sunxi_mbr.fex", \
maintype = "12345678", \
subtype = "1234567890___MBR",},
EOF
)
			sed -i "/^\s*\[FILELIST\]\s*;*/a $newitem" image.cfg
		fi
		update_mbr          sys_partition.bin 4
		if [ $? -ne 0 ]; then
			pack_error "update_mbr failed"
			exit 1
		fi
	fi

	if [ "x${PACK_NO_IMG}" != "xno_img" ]; then
		dragon image.cfg sys_partition.fex
		if [ $? -eq 0 ]; then
			if [ -e ${IMG_NAME} ]; then
				mv ${IMG_NAME} ../${IMG_NAME}
				echo '----------image is at----------'
				echo -e '\033[0;31;1m'
				echo ${ROOT_DIR}/${IMG_NAME}
				echo -e '\033[0m'
			fi
		fi

		if [ "x${PACK_PROGRAMMER}" = "xprogrammer" ]; then
			echo "waiting to ceate programmer img..."
			img_to_programmer ${IMG_PROGRAMMER_NAME} ../${IMG_NAME}
			if [ $? -eq 0 ]; then
				if [ -e ${IMG_PROGRAMMER_NAME} ]; then
					mv ${IMG_PROGRAMMER_NAME} ../${IMG_PROGRAMMER_NAME}
					echo '----------programmer image is at----------'
					echo -e '\033[0;31;1m'
					echo ${ROOT_DIR}/${IMG_PROGRAMMER_NAME}
					echo -e '\033[0m'
				fi
			fi
		fi
	else
		echo "not to pack img\n"
	fi

	cd ..
	printf "pack finish\n"
}

function do_signature()
{
	printf "prepare for signature by openssl\n"
    if [ "x${PACK_FUNC}" = "xprev_refurbish" ] ; then
		if [ "x${ARCH}" = "xarm64" ] ; then
			if [ "x${PACK_CHIP}" = "xsun50iw6p1" ] ; then
				cp -v ../common/sign_config/dragon_toc_a64_no_secureos_twokey.cfg dragon_toc.cfg
			else
				cp -v ../common/sign_config/dragon_toc_a64_no_secureos.cfg dragon_toc.cfg
			fi
		else
        	cp -v ../common/sign_config/dragon_toc_no_secureos.cfg dragon_toc.cfg
        fi
    else
		if [ "x${ARCH}" = "xarm64" ] ; then
			if [ "x${PACK_CHIP}" = "xsun50iw6p1" ] ; then
				cp -v ../common/sign_config/dragon_toc_a64_twokey.cfg dragon_toc.cfg
			else
				cp -v ../common/sign_config/dragon_toc_a64.cfg dragon_toc.cfg
			fi
		else
			if [ -f ../chips/${PACK_CHIP}/configs/default/dragon_toc.cfg ] ; then
				cp -v ../chips/${PACK_CHIP}/configs/default/dragon_toc.cfg dragon_toc.cfg
			else
				cp -v ../common/sign_config/dragon_toc.cfg dragon_toc.cfg
			fi
		fi
	fi

	#if pack for linux or dragonboard image,toc1 cert does not need recovery.cnf
	if [ "x${PACK_PLATFORM}" = "xlinux" -o "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
		sed -i 's/^onlykey=recovery/;onlykey=recovery/g' dragon_toc.cfg
	fi

	if [ $? -ne 0 ]
	then
		pack_error "dragon toc config file is not exist"
		exit 1
	fi

	rm -f cardscript.fex
	mv cardscript_secure.fex cardscript.fex
	if [ $? -ne 0 ]
	then
		pack_error "dragon cardscript_secure.fex file is not exist"
		exit 1
	fi

	dragonsecboot -toc0 dragon_toc.cfg ../common/keys  > /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc0 run error"
		exit 1
	fi

	update_toc0  toc0.fex           sys_config.bin
	if [ $? -ne 0 ]
	then
		pack_error "update toc0 run error"
		exit 1
	fi

	dragonsecboot -toc1 dragon_toc.cfg ../common/keys ../common/sign_config/cnf_base.cnf ../common/version/version_base.mk
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc1 run error"
		exit 1
	fi

	sigbootimg --image boot.fex --cert toc1/cert/boot.der --output boot_sig.fex
	if [ $? -ne 0 ] ; then
		pack_error "Pack cert to image error"
		exit 1
	else
		mv -f boot_sig.fex boot.fex
	fi


	echo "secure signature ok!"
}

################################ Platform func ################################
function do_pack_android()
{
	local link_real=$(get_realpath ${ANDROID_IMAGE_OUT} ./)

	printf "packing for android\n"

	if [ -z "${ANDROID_IMAGE_OUT}" ] ; then
		pack_error "please specify ANDROID_IMAGE_OUT env"
		exit 1
	fi

	if [ -f ${ANDROID_IMAGE_OUT}/verity_block.img ] ; then
		cp -f ${ANDROID_IMAGE_OUT}/verity_block.img verity_block.fex
	fi

	cp -f ${link_real}/boot.img boot.fex
	ln -sf ${link_real}/system.img system.fex
	cp -f ${link_real}/recovery.img recovery.fex

	if [ "x${PACK_PROGRAMMER}" = "xprogrammer" ]; then
		simg2img system.fex system_ext4.fex
	fi

	if [ -f ${ANDROID_IMAGE_OUT}/userdata.img ] ; then
		ln -sf ${link_real}/userdata.img userdata.fex
	fi

	if [ "x${PACK_SIG}" = "xsig" ] ; then
		echo "signature sunxi mbr"
		signature sunxi_mbr.fex dlinfo.fex
		echo "signature over"
	elif [ "x${PACK_SIG}" = "xsecure" ] ; then
		echo "secure"
		do_signature
		sigbootimg --image recovery.fex --cert toc1/cert/recovery.der --output recovery_sig.fex
		if [ $? -ne 0 ] ; then
			pack_error "Pack cert to image error"
			exit 1
		else
			mv -f recovery_sig.fex recovery.fex
		fi

	elif [ "x${PACK_SIG}" = "xprev_refurbish" ] ; then
		echo "prev_refurbish"
		do_signature
		sigbootimg --image recovery.fex --cert toc1/cert/recovery.der --output recovery_sig.fex
		if [ $? -ne 0 ] ; then
			pack_error "Pack cert to image error"
			exit 1
		else
			mv -f recovery_sig.fex recovery.fex
		fi
	else
		echo "normal"
	fi
}

function do_pack_camdroid()
{
	local link_real=$(get_realpath ${CAMLINUX_IMAGE_OUT} ./)

	printf "packing for camdroid\n"

	if [ -z "${CAMLINUX_IMAGE_OUT}" ] ; then
		pack_error "please specify CAMLINUX_IMAGE_OUT env"
		exit 1
	fi

	ln -sf ${link_real}/boot.img boot.fex
	ln -sf ${link_real}/system.img rootfs.fex
}

function do_pack_dragonboard()
{
	local link_real=$(get_realpath ${LICHEE_OUT} ./)
	printf "packing for dragonboard\n"

	ln -sf ${link_real}/boot.img boot.fex
	ln -sf ${link_real}/rootfs.ext4 rootfs.fex

	if [ "x${PACK_SIG}" = "xsig" ] ; then
		echo "signature sunxi mbr"
		signature sunxi_mbr.fex dlinfo.fex
		echo "signature over"
	elif [ "x${PACK_SIG}" = "xsecure" ] ; then
		echo "secure"
		do_signature
	elif [ "x${PACK_SIG}" = "xprev_refurbish" ] ; then
		echo "prev_refurbish"
		do_signature
	else
		echo "normal"
	fi
}

function do_pack_eyeseelinux()
{
	local link_real=$(get_realpath ${LICHEE_OUT} ./)

	printf "packing for eyeseelinux\n"
	# Those files is ready for SPINor.
	if [ "x${PACK_BOARD:(-3)}" = "xnor" ] ; then
		ln -sf ${link_real}/uImage          kernel.fex
		ln -sf ${link_real}/rootfs.squashfs rootfs_nor.fex
	else
		ln -sf ${link_real}/vmlinux.tar.bz2 vmlinux.fex
		ln -sf ${link_real}/boot.img        boot.fex
		ln -sf ${link_real}/rootfs.ext4     rootfs.fex
	fi
}

function do_pack_linux()
{
	local link_real=$(get_realpath ${LICHEE_OUT} ./)

	printf "packing for linux\n"

	ln -sf ${link_real}/vmlinux.tar.bz2 vmlinux.fex
	ln -sf ${link_real}/boot.img        boot.fex
	ln -sf ${link_real}/rootfs.ext4     rootfs.fex

	# Those files is ready for SPINor.
	ln -sf ${link_real}/uImage          kernel.fex
	ln -sf ${link_real}/rootfs.squashfs rootfs_nor.fex

	if [ "x${PACK_SIG}" = "xsecure" ] ; then
		echo "secure"
		do_signature
	elif [ "x${PACK_SIG}" = "xprev_refurbish" ] ; then
		echo "prev_refurbish"
		do_signature
	else
		echo "normal"
	fi
}

do_prepare
do_ini_to_dts
do_common
do_pack_${PACK_PLATFORM}
do_finish
